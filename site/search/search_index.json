{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This is a simple python based application that demonstrates how to deploy a microservice application that is fronted by a nginx load-balancer. All application components are packaged as containers and orchestrated using docker-compose. Application components This application has the following components: nginx service - This is used to front all traffic and load-balance it across the master-services master service - Represents the scaled-out main application used to front and redirect traffic to appropriate downstream services - news & weather news service - Represents the news service that delivers the news by country. News service uses publicly available service NewsAPI weather service - Represents the weather service that delivers the weather by city. Weather service uses a publicly available service OpenWeather Application Structure |\u2500\u2500 docs # Contains edited nginx configuration file that will be copied to the image | \u251c\u2500\u2500 img # Contains all images referenced in mkdocs | \u251c\u2500\u2500 *.md # Other mkdocs .md files \u251c\u2500\u2500 mkdocs.yml # YAML for for mkdocs \u251c\u2500\u2500 .gitattributes | \u251c\u2500\u2500 Dockerfile # Dockerfile for the main application \u251c\u2500\u2500 Dockerfile.nginx # Dockerfile for the nginx load-balancer \u251c\u2500\u2500 Dockerfile.news # Dockerfile for the news service \u251c\u2500\u2500 Dockerfile.weather # Dockerfile for the weather service \u251c\u2500\u2500 requirements.txt # Specifies packages that need to be installed in the container | \u251c\u2500\u2500 docker-compose.yaml # Defines docker-compose.yaml file for web-app & nginx-reverse-proxy \u251c\u2500\u2500 nginx.conf # Contains edited nginx configuration file that will be copied to the image | \u251c\u2500\u2500 master_assistant.py # Simple primary app built using Python's Flask API \u251c\u2500\u2500 weather.py # Simple weather app built using Python's Flask API \u251c\u2500\u2500 news.py # Simple news app using Python's Flask API | \u251c\u2500\u2500 README.md # Standard README.md file Pre-requisites This application only requires python and docker installed on your computer Create project folder python-nginx-microservice Navigate to project folder PS C:\\Users\\aniru\\workspace\\github> cd .\\python-nginx-microservice\\ PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> Important : Ensure all files are in UTF-8 format. UTF-16 causes issues with Docker. Copy and create file requirements.txt . This will be used to tell docker to install required software. aniso8601==8.1.0 blinker==1.4 certifi==2020.12.5 chardet==4.0.0 click==7.1.2 Flask==1.1.2 Flask-Jsonpify==1.5.0 flask-requests==0.0.14 Flask-RESTful==0.3.8 Flask-SQLAlchemy==2.4.4 idna==2.10 itsdangerous==1.1.0 Jinja2==2.11.2 MarkupSafe==1.1.1 pampy==0.3.0 pytz==2020.4 requests==2.25.1 six==1.15.0 SQLAlchemy==1.3.20 urllib3==1.26.3 Werkzeug==1.0.1 Credits I would like to thank the author (@manos_kakarakis) of this orginal post whose code and methodology I have used as is. Python Flask scalable microservices using docker-compose and Nginx load balancer","title":"Home"},{"location":"#introduction","text":"This is a simple python based application that demonstrates how to deploy a microservice application that is fronted by a nginx load-balancer. All application components are packaged as containers and orchestrated using docker-compose.","title":"Introduction"},{"location":"#application-components","text":"This application has the following components: nginx service - This is used to front all traffic and load-balance it across the master-services master service - Represents the scaled-out main application used to front and redirect traffic to appropriate downstream services - news & weather news service - Represents the news service that delivers the news by country. News service uses publicly available service NewsAPI weather service - Represents the weather service that delivers the weather by city. Weather service uses a publicly available service OpenWeather","title":"Application components"},{"location":"#application-structure","text":"|\u2500\u2500 docs # Contains edited nginx configuration file that will be copied to the image | \u251c\u2500\u2500 img # Contains all images referenced in mkdocs | \u251c\u2500\u2500 *.md # Other mkdocs .md files \u251c\u2500\u2500 mkdocs.yml # YAML for for mkdocs \u251c\u2500\u2500 .gitattributes | \u251c\u2500\u2500 Dockerfile # Dockerfile for the main application \u251c\u2500\u2500 Dockerfile.nginx # Dockerfile for the nginx load-balancer \u251c\u2500\u2500 Dockerfile.news # Dockerfile for the news service \u251c\u2500\u2500 Dockerfile.weather # Dockerfile for the weather service \u251c\u2500\u2500 requirements.txt # Specifies packages that need to be installed in the container | \u251c\u2500\u2500 docker-compose.yaml # Defines docker-compose.yaml file for web-app & nginx-reverse-proxy \u251c\u2500\u2500 nginx.conf # Contains edited nginx configuration file that will be copied to the image | \u251c\u2500\u2500 master_assistant.py # Simple primary app built using Python's Flask API \u251c\u2500\u2500 weather.py # Simple weather app built using Python's Flask API \u251c\u2500\u2500 news.py # Simple news app using Python's Flask API | \u251c\u2500\u2500 README.md # Standard README.md file","title":"Application Structure"},{"location":"#pre-requisites","text":"This application only requires python and docker installed on your computer Create project folder python-nginx-microservice Navigate to project folder PS C:\\Users\\aniru\\workspace\\github> cd .\\python-nginx-microservice\\ PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> Important : Ensure all files are in UTF-8 format. UTF-16 causes issues with Docker. Copy and create file requirements.txt . This will be used to tell docker to install required software. aniso8601==8.1.0 blinker==1.4 certifi==2020.12.5 chardet==4.0.0 click==7.1.2 Flask==1.1.2 Flask-Jsonpify==1.5.0 flask-requests==0.0.14 Flask-RESTful==0.3.8 Flask-SQLAlchemy==2.4.4 idna==2.10 itsdangerous==1.1.0 Jinja2==2.11.2 MarkupSafe==1.1.1 pampy==0.3.0 pytz==2020.4 requests==2.25.1 six==1.15.0 SQLAlchemy==1.3.20 urllib3==1.26.3 Werkzeug==1.0.1","title":"Pre-requisites"},{"location":"#credits","text":"I would like to thank the author (@manos_kakarakis) of this orginal post whose code and methodology I have used as is. Python Flask scalable microservices using docker-compose and Nginx load balancer","title":"Credits"},{"location":"build-and-run-app/","text":"Build and deploy We will build, deploy and scale using the docker-compose command docker-compose up --build --scale master=2 This will tell docker-compose to : Read the docker-compose.yml file Build all the container images Run all the containers in detached mode Scale the master image to 2 instances Start all containers PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker compose up [+] Running 5/5 - Network python-nginx-microservice_default Created 1.1s - Container python-nginx-microservice-news-1 Created 0.8s - Container python-nginx-microservice-master-1 Created 0.8s - Container python-nginx-microservice-weather-1 Created 0.8s - Container nginx Created 0.2s Attaching to nginx, python-nginx-microservice-master-1, python-nginx-microservice-news-1, python-nginx-microservice-weather-1 We can now test if the containers are running. PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker compose ps NAME COMMAND SERVICE STATUS PORTS nginx \"/docker-entrypoint.\u2026\" nginx running 0.0.0.0:80->80/tcp python-nginx-microservice-master-1 \"python master_assis\u2026\" master running 3001/tcp python-nginx-microservice-master-2 \"python master_assis\u2026\" master running 3001/tcp python-nginx-microservice-news-1 \"python news.py\" news running 0.0.0.0:3003->3003/tcp python-nginx-microservice-weather-1 \"python weather.py\" weather running 0.0.0.0:3002->3002/tcp As you can see, this indicates : nginx service is running as nginx on port:80 master service is running as python-nginx-microservice-master-1 and python-nginx-microservice-master-1 on internal port:3001 news service is running as python-nginx-microservice-news-1 on port:3002 weather service is running as python-nginx-microservice-weather-1 on port:3003 Test the application Now we will test the application by invoking 3 URLs: Index page : In this case the following code is executed in the master service News page : We will now query all news for the day in US http://localhost/news?country=us Let's check the logs by using command docker logs <container-name> -f PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker logs python-nginx-microservice-news-1 -f * Serving Flask app \"news\" (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on * Running on http://0.0.0.0:3003/ (Press CTRL+C to quit) * Restarting with stat * Debugger is active! * Debugger PIN: 329-461-268 172.28.0.3 - - [18/Jan/2023 20:22:42] \"GET /news?country=de HTTP/1.1\" 200 - 172.28.0.3 - - [18/Jan/2023 20:55:28] \"GET /news?country=us HTTP/1.1\" 200 - Weather page : http://localhost/weather?city=chicago Let's check the logs by using command docker logs <container-name> -f PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker logs python-nginx-microservice-weather-1 -f * Serving Flask app \"weather\" (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on * Running on http://0.0.0.0:3002/ (Press CTRL+C to quit) * Restarting with stat * Debugger is active! * Debugger PIN: 858-141-160 172.28.0.2 - - [18/Jan/2023 20:22:45] \"GET /weather?city=amsterdam HTTP/1.1\" 200 - 172.28.0.2 - - [18/Jan/2023 20:59:38] \"GET /weather?city=amsterdam HTTP/1.1\" 200 - Test the load-balancer Open two separate terminals and run: docker logs python-nginx-microservice-master-1 -f docker logs python-nginx-microservice-master-2 -f Now invoke these URLs in random while observing the logs: news-test weather-test","title":"Build and run app"},{"location":"build-and-run-app/#build-and-deploy","text":"We will build, deploy and scale using the docker-compose command docker-compose up --build --scale master=2 This will tell docker-compose to : Read the docker-compose.yml file Build all the container images Run all the containers in detached mode Scale the master image to 2 instances","title":"Build and deploy"},{"location":"build-and-run-app/#start-all-containers","text":"PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker compose up [+] Running 5/5 - Network python-nginx-microservice_default Created 1.1s - Container python-nginx-microservice-news-1 Created 0.8s - Container python-nginx-microservice-master-1 Created 0.8s - Container python-nginx-microservice-weather-1 Created 0.8s - Container nginx Created 0.2s Attaching to nginx, python-nginx-microservice-master-1, python-nginx-microservice-news-1, python-nginx-microservice-weather-1 We can now test if the containers are running. PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker compose ps NAME COMMAND SERVICE STATUS PORTS nginx \"/docker-entrypoint.\u2026\" nginx running 0.0.0.0:80->80/tcp python-nginx-microservice-master-1 \"python master_assis\u2026\" master running 3001/tcp python-nginx-microservice-master-2 \"python master_assis\u2026\" master running 3001/tcp python-nginx-microservice-news-1 \"python news.py\" news running 0.0.0.0:3003->3003/tcp python-nginx-microservice-weather-1 \"python weather.py\" weather running 0.0.0.0:3002->3002/tcp As you can see, this indicates : nginx service is running as nginx on port:80 master service is running as python-nginx-microservice-master-1 and python-nginx-microservice-master-1 on internal port:3001 news service is running as python-nginx-microservice-news-1 on port:3002 weather service is running as python-nginx-microservice-weather-1 on port:3003","title":"Start all containers"},{"location":"build-and-run-app/#test-the-application","text":"Now we will test the application by invoking 3 URLs: Index page : In this case the following code is executed in the master service News page : We will now query all news for the day in US http://localhost/news?country=us Let's check the logs by using command docker logs <container-name> -f PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker logs python-nginx-microservice-news-1 -f * Serving Flask app \"news\" (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on * Running on http://0.0.0.0:3003/ (Press CTRL+C to quit) * Restarting with stat * Debugger is active! * Debugger PIN: 329-461-268 172.28.0.3 - - [18/Jan/2023 20:22:42] \"GET /news?country=de HTTP/1.1\" 200 - 172.28.0.3 - - [18/Jan/2023 20:55:28] \"GET /news?country=us HTTP/1.1\" 200 - Weather page : http://localhost/weather?city=chicago Let's check the logs by using command docker logs <container-name> -f PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker logs python-nginx-microservice-weather-1 -f * Serving Flask app \"weather\" (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on * Running on http://0.0.0.0:3002/ (Press CTRL+C to quit) * Restarting with stat * Debugger is active! * Debugger PIN: 858-141-160 172.28.0.2 - - [18/Jan/2023 20:22:45] \"GET /weather?city=amsterdam HTTP/1.1\" 200 - 172.28.0.2 - - [18/Jan/2023 20:59:38] \"GET /weather?city=amsterdam HTTP/1.1\" 200 -","title":"Test the application"},{"location":"build-and-run-app/#test-the-load-balancer","text":"Open two separate terminals and run: docker logs python-nginx-microservice-master-1 -f docker logs python-nginx-microservice-master-2 -f Now invoke these URLs in random while observing the logs: news-test weather-test","title":"Test the load-balancer"},{"location":"clean-up/","text":"Clean up Congratulations ! You have made it. We will now perform the clean-up. Cleanup will involve shutting down the services. We will use docker-compose command for this. PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker compose down [+] Running 6/6 - Container python-nginx-microservice-weather-1 Removed 3.9s - Container python-nginx-microservice-news-1 Removed 2.7s - Container nginx Removed 3.9s - Container python-nginx-microservice-master-1 Removed 1.2s - Container python-nginx-microservice-master-2 Removed 1.0s - Network python-nginx-microservice_default Removed Let's test one last time to see if all services are shutdown PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES As you can see all the services are down. You made it !","title":"Clean up"},{"location":"clean-up/#clean-up","text":"Congratulations ! You have made it. We will now perform the clean-up. Cleanup will involve shutting down the services. We will use docker-compose command for this. PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker compose down [+] Running 6/6 - Container python-nginx-microservice-weather-1 Removed 3.9s - Container python-nginx-microservice-news-1 Removed 2.7s - Container nginx Removed 3.9s - Container python-nginx-microservice-master-1 Removed 1.2s - Container python-nginx-microservice-master-2 Removed 1.0s - Network python-nginx-microservice_default Removed Let's test one last time to see if all services are shutdown PS C:\\Users\\aniru\\workspace\\github\\python-nginx-microservice> docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES As you can see all the services are down. You made it !","title":"Clean up"},{"location":"create-docker-compose/","text":"Create Docker Compose We will define the docker-compose.yml file in this section. This is used by docker-compose to build and start all the services. Create Docker Compose file Create file docker-compose.yml and copy following contents: version: \"1.2\" services: nginx: container_name: nginx build: context: . dockerfile: Dockerfile.nginx ports: - 80:80 depends_on: - master master: build: context: . dockerfile: Dockerfile weather: build: context: . dockerfile: Dockerfile.weather ports: - 3002:3002 news: build: context: . dockerfile: Dockerfile.news ports: - 3003:3003 This tells docker-compose to: Create 4 container images : nginx : This uses Dockerfile.nginx and maps internal container port:80 to external port:80 master : This uses Dockerfile . Note that we are not providing a mapping of internal port:3001 as we expect to scale this app to many instances weather : This uses Dockerfile.weather and maps internal container port:3002 to external port:3002 news : This uses Dockerfile.news and maps internal container port:3003 to external port:3003","title":"Define docker compose"},{"location":"create-docker-compose/#create-docker-compose","text":"We will define the docker-compose.yml file in this section. This is used by docker-compose to build and start all the services.","title":"Create Docker Compose"},{"location":"create-docker-compose/#create-docker-compose-file","text":"Create file docker-compose.yml and copy following contents: version: \"1.2\" services: nginx: container_name: nginx build: context: . dockerfile: Dockerfile.nginx ports: - 80:80 depends_on: - master master: build: context: . dockerfile: Dockerfile weather: build: context: . dockerfile: Dockerfile.weather ports: - 3002:3002 news: build: context: . dockerfile: Dockerfile.news ports: - 3003:3003 This tells docker-compose to: Create 4 container images : nginx : This uses Dockerfile.nginx and maps internal container port:80 to external port:80 master : This uses Dockerfile . Note that we are not providing a mapping of internal port:3001 as we expect to scale this app to many instances weather : This uses Dockerfile.weather and maps internal container port:3002 to external port:3002 news : This uses Dockerfile.news and maps internal container port:3003 to external port:3003","title":"Create Docker Compose file"},{"location":"create-master-app/","text":"Create Master App This is the main application. This will be configured to scale to 2 instances that are load balanced by Nginx. The app supports the following redirections : / : Return simple message on how to use this service /news : Pass request to news service /weather : Pass request to weather service Create master service Create master_assistant.py and copy the following contents. from flask import Flask, request from flask_restful import Api import requests app = Flask(__name__) api = Api(app) @app.route('/') def index(): res=\"Access master services as follows: http://localhost/news?country=us or http://localhost/weather?city=chicago\" return res @app.route('/weather') def weather(): city = request.args.get('city') if city.isdigit(): res = \"City name must be string e.g. 'Amsterdam, Berlin'\" return res response = requests.get(\"http://weather:3002/weather?city=\"+ city) return response.json() @app.route('/news') def news(): country_name = request.args.get('country') if country_name.isdigit() or len(country_name) > 2 : resp = \"Country name must be string. Choose from below: \\n\\nThe 2-letter ISO 3166-1 code of the country you want to get headlines for.\\nPossible options: ae ar at au be bg br ca ch cn co cu cz de eg fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za\" return resp response = requests.get(\"http://news:3003/news?country=\"+ country_name) return response.json() if __name__ == '__main__': app.run(host=\"0.0.0.0\",port=3001,debug=True,threaded=True) The key point to see is that the app runs on port 3001. Create Dockerfile Since this is the master app, we will use the standard Dockerfile . This will be auto-referenced in the docker-compose.yml file. # use Python 3.11 image FROM python:3.11-alpine # install dependencies COPY requirements.txt . RUN pip install -r requirements.txt EXPOSE 3001 COPY master_assistant.py . # run the application CMD [\"python\", \"master_assistant.py\"] This will tell docker to: Use python base image 3.11-alpine Reference requirements.txt in the image to install required software Expose port 3001 Copy master_assistant.py to the image Start the master service","title":"Create master app"},{"location":"create-master-app/#create-master-app","text":"This is the main application. This will be configured to scale to 2 instances that are load balanced by Nginx. The app supports the following redirections : / : Return simple message on how to use this service /news : Pass request to news service /weather : Pass request to weather service","title":"Create Master App"},{"location":"create-master-app/#create-master-service","text":"Create master_assistant.py and copy the following contents. from flask import Flask, request from flask_restful import Api import requests app = Flask(__name__) api = Api(app) @app.route('/') def index(): res=\"Access master services as follows: http://localhost/news?country=us or http://localhost/weather?city=chicago\" return res @app.route('/weather') def weather(): city = request.args.get('city') if city.isdigit(): res = \"City name must be string e.g. 'Amsterdam, Berlin'\" return res response = requests.get(\"http://weather:3002/weather?city=\"+ city) return response.json() @app.route('/news') def news(): country_name = request.args.get('country') if country_name.isdigit() or len(country_name) > 2 : resp = \"Country name must be string. Choose from below: \\n\\nThe 2-letter ISO 3166-1 code of the country you want to get headlines for.\\nPossible options: ae ar at au be bg br ca ch cn co cu cz de eg fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za\" return resp response = requests.get(\"http://news:3003/news?country=\"+ country_name) return response.json() if __name__ == '__main__': app.run(host=\"0.0.0.0\",port=3001,debug=True,threaded=True) The key point to see is that the app runs on port 3001.","title":"Create master service"},{"location":"create-master-app/#create-dockerfile","text":"Since this is the master app, we will use the standard Dockerfile . This will be auto-referenced in the docker-compose.yml file. # use Python 3.11 image FROM python:3.11-alpine # install dependencies COPY requirements.txt . RUN pip install -r requirements.txt EXPOSE 3001 COPY master_assistant.py . # run the application CMD [\"python\", \"master_assistant.py\"] This will tell docker to: Use python base image 3.11-alpine Reference requirements.txt in the image to install required software Expose port 3001 Copy master_assistant.py to the image Start the master service","title":"Create Dockerfile"},{"location":"create-news-service/","text":"Create News Service In this section, we create our first news service app. The news service app is based of Flask API and calls the NewsAPI to generate top-news by country. The news service app will be configured on port:3003 Sample request/response A request involves 2 attributes: country : This is the 2 letter code for the country API key : This can be generated from the website. I am using the original author's A sample request/response will look like this : Sample request for all news for the day in US https://newsapi.org/v2/top-headlines?country=US&apiKey=70dcd1c6a0d24ebdb57ff071ff9b8ddc Sample response for this request (JSON) StatusCode : 200 StatusDescription : OK Content : { \"articles\": [ { \"author\": \"Amy Gardner, Dan Rosenzweig-Ziff\", \"content\": \"Comment on this story\\r\\nThe arrest of a defeated candidate for the New Mexico legislature on charges tha... RawContent : HTTP/1.1 200 OK Connection: keep-alive Content-Length: 18926 Content-Type: application/json Date: Wed, 18 Jan 2023 03:16:42 GMT Server: nginx/1.23.3 { \"articles\": [ { \"author\": \"Am... Create news service Create the file news.py and copy the following contents from flask import Flask, request from flask_restful import Api import json import requests app = Flask(__name__) api = Api(app) @app.route('/news') def news(): # sample request: https://newsapi.org/v2/top-headlines?country=US&apiKey=70dcd1c6a0d24ebdb57ff071ff9b8ddc country_name = request.args.get('country') api_key = \"70dcd1c6a0d24ebdb57ff071ff9b8ddc\" base_url = \"http://newsapi.org/v2/top-headlines?\" complete_url = base_url + \"country=\" + country_name + \"&apiKey=\" + api_key response = requests.get(complete_url) return response.json() if __name__ == '__main__': app.run(host=\"0.0.0.0\",port='3003',threaded=True,debug=True) Create Dockerfile We will create a new dockerfile called Dockerfile.news . This will be referenced in the docker-compose.yml file. Copy the following contents into Dockerfile.news . # use Python 3.11 image FROM python:3.11-alpine # install dependencies: COPY requirements.txt . RUN pip install -r requirements.txt EXPOSE 3003 COPY news.py . # run the application: CMD [\"python\", \"news.py\"] This will tell docker to: Use python base image 3.11-alpine Reference requirements.txt in the image to install required software Expose port 3003 Copy news.py to the image Start the news service","title":"Create news service"},{"location":"create-news-service/#create-news-service","text":"In this section, we create our first news service app. The news service app is based of Flask API and calls the NewsAPI to generate top-news by country. The news service app will be configured on port:3003","title":"Create News Service"},{"location":"create-news-service/#sample-requestresponse","text":"A request involves 2 attributes: country : This is the 2 letter code for the country API key : This can be generated from the website. I am using the original author's A sample request/response will look like this : Sample request for all news for the day in US https://newsapi.org/v2/top-headlines?country=US&apiKey=70dcd1c6a0d24ebdb57ff071ff9b8ddc Sample response for this request (JSON) StatusCode : 200 StatusDescription : OK Content : { \"articles\": [ { \"author\": \"Amy Gardner, Dan Rosenzweig-Ziff\", \"content\": \"Comment on this story\\r\\nThe arrest of a defeated candidate for the New Mexico legislature on charges tha... RawContent : HTTP/1.1 200 OK Connection: keep-alive Content-Length: 18926 Content-Type: application/json Date: Wed, 18 Jan 2023 03:16:42 GMT Server: nginx/1.23.3 { \"articles\": [ { \"author\": \"Am...","title":"Sample request/response"},{"location":"create-news-service/#create-news-service_1","text":"Create the file news.py and copy the following contents from flask import Flask, request from flask_restful import Api import json import requests app = Flask(__name__) api = Api(app) @app.route('/news') def news(): # sample request: https://newsapi.org/v2/top-headlines?country=US&apiKey=70dcd1c6a0d24ebdb57ff071ff9b8ddc country_name = request.args.get('country') api_key = \"70dcd1c6a0d24ebdb57ff071ff9b8ddc\" base_url = \"http://newsapi.org/v2/top-headlines?\" complete_url = base_url + \"country=\" + country_name + \"&apiKey=\" + api_key response = requests.get(complete_url) return response.json() if __name__ == '__main__': app.run(host=\"0.0.0.0\",port='3003',threaded=True,debug=True)","title":"Create news service"},{"location":"create-news-service/#create-dockerfile","text":"We will create a new dockerfile called Dockerfile.news . This will be referenced in the docker-compose.yml file. Copy the following contents into Dockerfile.news . # use Python 3.11 image FROM python:3.11-alpine # install dependencies: COPY requirements.txt . RUN pip install -r requirements.txt EXPOSE 3003 COPY news.py . # run the application: CMD [\"python\", \"news.py\"] This will tell docker to: Use python base image 3.11-alpine Reference requirements.txt in the image to install required software Expose port 3003 Copy news.py to the image Start the news service","title":"Create Dockerfile"},{"location":"create-nginx-loadbalancer/","text":"Create Nginx Loadbalancer The purpose of the Nginx Loadblancer is to accept all requests and load-balance it across 2 instances of the master application. The scaling of the master service will be defined during the container start-up. Create nginx.conf Load balancing with Nginx uses a round-robin algorithm by default if no other method is defined. With round-robin scheme each server is selected in turns according to the order we set them in the nginx.conf file. This balances the number of requests equally between our to two master instances. ***Please notice that the master application will have 2 instances and are refernced by their container-names. The container-name is usually : [project-directory]-[image-name-from-docker-compose.yml]-[instance-count] Project directory from the start page is : python-nginx-microservice Now create file nginx.conf and copy the following contents : events {} # Define which servers to include in the load balancing scheme. http { upstream app { server master; server python-nginx-microservice-master-1:3001; server python-nginx-microservice-master-2:3001; } # This server accepts all traffic to port 80 and passes it to the upstream. server { listen 80; server_name app.com; location / { proxy_pass http://app; } } } Create Dockerfile.nginx # using Nginx base image FROM nginx # delete nginx default .conf .file RUN rm /etc/nginx/conf.d/default.conf # add the .conf file we have created COPY nginx.conf /etc/nginx/nginx.conf #start the nginx server CMD [\"/usr/sbin/nginx\", \"-g\", \"daemon off;\"] This tells Docker to: Build an image starting with the nginx base image Remove the old configuration file Replace it with the newly updated nginx.conf Start the nginx server","title":"Create ngix loadbalancer"},{"location":"create-nginx-loadbalancer/#create-nginx-loadbalancer","text":"The purpose of the Nginx Loadblancer is to accept all requests and load-balance it across 2 instances of the master application. The scaling of the master service will be defined during the container start-up.","title":"Create Nginx Loadbalancer"},{"location":"create-nginx-loadbalancer/#create-nginxconf","text":"Load balancing with Nginx uses a round-robin algorithm by default if no other method is defined. With round-robin scheme each server is selected in turns according to the order we set them in the nginx.conf file. This balances the number of requests equally between our to two master instances. ***Please notice that the master application will have 2 instances and are refernced by their container-names. The container-name is usually : [project-directory]-[image-name-from-docker-compose.yml]-[instance-count] Project directory from the start page is : python-nginx-microservice Now create file nginx.conf and copy the following contents : events {} # Define which servers to include in the load balancing scheme. http { upstream app { server master; server python-nginx-microservice-master-1:3001; server python-nginx-microservice-master-2:3001; } # This server accepts all traffic to port 80 and passes it to the upstream. server { listen 80; server_name app.com; location / { proxy_pass http://app; } } }","title":"Create nginx.conf"},{"location":"create-nginx-loadbalancer/#create-dockerfilenginx","text":"# using Nginx base image FROM nginx # delete nginx default .conf .file RUN rm /etc/nginx/conf.d/default.conf # add the .conf file we have created COPY nginx.conf /etc/nginx/nginx.conf #start the nginx server CMD [\"/usr/sbin/nginx\", \"-g\", \"daemon off;\"] This tells Docker to: Build an image starting with the nginx base image Remove the old configuration file Replace it with the newly updated nginx.conf Start the nginx server","title":"Create Dockerfile.nginx"},{"location":"create-weather-service/","text":"Create Weather Service Now we will create the weather service app. The news service app is also based of Flask API and simply calls the WeatherAPI . The weather service app will be configured on port:3002 Sample request/response A request involves 2 attributes: appid : This is the 2 letter code for the country q : Represents the city name Sample request/response will look like this: Sample request for the weather in New York city PS C:\\Users\\aniru\\workspace\\github\\nginx-docker> curl https://api.openweathermap.org/data/2.5/weather?appid=deb96cff96df7c74e93e62661b91c3c2'&'q=new%20york Sample response for the above request : {\"coord\":{\"lon\":-74.006,\"lat\":40.7143},\"weather\":[{\"id\":804,\"main\":\"Clouds\",\"description\":\"overcast clouds\",\"icon\":\"04n\"}],\"base\":\"stations\",\"main\":{\"temp\":279.94,\"feels_like\":276.89,\"temp_min\":277.88,\"temp_max\":281.12,\"pressure\":1005,\"humidity\":53},\"visibility\":10000,\"wind\":{\"speed\":4.63,\"deg\":230},\"clouds\":{\"all\":100},\"dt\":1674012646,\"sys\":{\"type\":2,\"id\":2008101,\"country\":\"US\",\"sunrise\":1673957823,\"sunset\":1673992477},\"timezone\":-18000,\"id\":5128581,\"name\":\"New York\",\"cod\":200} Create weather service Create file weather.py and copy the following contents : from flask import Flask, request from flask_restful import Api import json import requests app = Flask(__name__) api = Api(app) @app.route('/weather') def weather(): # sample request: http://api.openweathermap.org/data/2.5/weather?appid=deb96cff96df7c74e93e62661b91c3c2&q=new%20york city_name = request.args.get('city') api_key = \"deb96cff96df7c74e93e62661b91c3c2\" base_url = \"http://api.openweathermap.org/data/2.5/weather?\" complete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name response = requests.get(complete_url) return response.json() if __name__ == '__main__': app.run(host=\"0.0.0.0\",port='3002',threaded=True,debug=True) This tells weather app to parse any incoming request and pass on the request to the OpenWeather API. The app returns the response returned by the weather API as is. Create Dockerfile We will create a new dockerfile called Dockerfile.weather . This will be referenced in the docker-compose.yml file. Copy the following contents into Dockerfile.weather . # use Python 3.11 image FROM python:3.11-alpine # install dependencies: COPY requirements.txt . RUN pip install -r requirements.txt EXPOSE 3002 COPY weather.py . # run the application: CMD [\"python\", \"weather.py\"] This will tell docker to: Use python base image 3.11-alpine Reference requirements.txt in the image to install required software Expose port 3002 Copy news.py to the image Start the weather service","title":"Create weather service"},{"location":"create-weather-service/#create-weather-service","text":"Now we will create the weather service app. The news service app is also based of Flask API and simply calls the WeatherAPI . The weather service app will be configured on port:3002","title":"Create Weather Service"},{"location":"create-weather-service/#sample-requestresponse","text":"A request involves 2 attributes: appid : This is the 2 letter code for the country q : Represents the city name Sample request/response will look like this: Sample request for the weather in New York city PS C:\\Users\\aniru\\workspace\\github\\nginx-docker> curl https://api.openweathermap.org/data/2.5/weather?appid=deb96cff96df7c74e93e62661b91c3c2'&'q=new%20york Sample response for the above request : {\"coord\":{\"lon\":-74.006,\"lat\":40.7143},\"weather\":[{\"id\":804,\"main\":\"Clouds\",\"description\":\"overcast clouds\",\"icon\":\"04n\"}],\"base\":\"stations\",\"main\":{\"temp\":279.94,\"feels_like\":276.89,\"temp_min\":277.88,\"temp_max\":281.12,\"pressure\":1005,\"humidity\":53},\"visibility\":10000,\"wind\":{\"speed\":4.63,\"deg\":230},\"clouds\":{\"all\":100},\"dt\":1674012646,\"sys\":{\"type\":2,\"id\":2008101,\"country\":\"US\",\"sunrise\":1673957823,\"sunset\":1673992477},\"timezone\":-18000,\"id\":5128581,\"name\":\"New York\",\"cod\":200}","title":"Sample request/response"},{"location":"create-weather-service/#create-weather-service_1","text":"Create file weather.py and copy the following contents : from flask import Flask, request from flask_restful import Api import json import requests app = Flask(__name__) api = Api(app) @app.route('/weather') def weather(): # sample request: http://api.openweathermap.org/data/2.5/weather?appid=deb96cff96df7c74e93e62661b91c3c2&q=new%20york city_name = request.args.get('city') api_key = \"deb96cff96df7c74e93e62661b91c3c2\" base_url = \"http://api.openweathermap.org/data/2.5/weather?\" complete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name response = requests.get(complete_url) return response.json() if __name__ == '__main__': app.run(host=\"0.0.0.0\",port='3002',threaded=True,debug=True) This tells weather app to parse any incoming request and pass on the request to the OpenWeather API. The app returns the response returned by the weather API as is.","title":"Create weather service"},{"location":"create-weather-service/#create-dockerfile","text":"We will create a new dockerfile called Dockerfile.weather . This will be referenced in the docker-compose.yml file. Copy the following contents into Dockerfile.weather . # use Python 3.11 image FROM python:3.11-alpine # install dependencies: COPY requirements.txt . RUN pip install -r requirements.txt EXPOSE 3002 COPY weather.py . # run the application: CMD [\"python\", \"weather.py\"] This will tell docker to: Use python base image 3.11-alpine Reference requirements.txt in the image to install required software Expose port 3002 Copy news.py to the image Start the weather service","title":"Create Dockerfile"}]}